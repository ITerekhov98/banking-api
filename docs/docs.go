// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/accounts": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new bank account for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Create a new bank account",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Account"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/accounts/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns information about a bank account if it belongs to the user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Get account details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Account ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Account"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/analytics": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns total income and expenses for the current month",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Analytics"
                ],
                "summary": "Get monthly income and expenses",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.MonthlyStats"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/analytics/predict": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns projected account balance based on upcoming credit payments",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Analytics"
                ],
                "summary": "Predict account balance",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Prediction period in days (max 365)",
                        "name": "days",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.predictedBalanceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/cards": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns decrypted virtual card data (number, expiry) for the authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Get user's virtual cards",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.CardRaw"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Generates a new encrypted virtual card for the specified account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cards"
                ],
                "summary": "Issue a new virtual card",
                "parameters": [
                    {
                        "description": "Target account ID",
                        "name": "createCardRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.createCardRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.CardPlain"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/credits": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Issues a new credit for the user with annuity payment schedule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Credits"
                ],
                "summary": "Create a new credit",
                "parameters": [
                    {
                        "description": "Credit details",
                        "name": "createCreditRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.createCreditRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Credit"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/credits/{id}/schedule": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns a full monthly payment schedule for a specific credit",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Credits"
                ],
                "summary": "Get credit payment schedule",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Credit ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.PaymentSchedule"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/deposit": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds funds to the specified user-owned account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Deposit money to account",
                "parameters": [
                    {
                        "description": "Deposit details",
                        "name": "depositRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.depositRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Account"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/keyrate": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get current key rate from Central Bank",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CBR"
                ],
                "summary": "Get current key rate",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.KeyRateResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/transfer": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Transfers money from one user-owned account to another account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Transfer funds between accounts",
                "parameters": [
                    {
                        "description": "Transfer details",
                        "name": "transferRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.transferRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/withdraw": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deducts funds from the specified user-owned account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Withdraw money from account",
                "parameters": [
                    {
                        "description": "Withdraw details",
                        "name": "withdrawRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.depositRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Account"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Validates credentials and returns access token if successful",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Authenticate user and return JWT token",
                "parameters": [
                    {
                        "description": "Login data",
                        "name": "loginRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Registers a user with unique email and username, returns user info",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "Registration data",
                        "name": "registerRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.registerRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handler.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.KeyRateResponse": {
            "type": "object",
            "properties": {
                "key_rate": {
                    "description": "Current key rate\nexample: 21",
                    "type": "number"
                }
            }
        },
        "handler.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Unique user email\nexample: example@gmail.com",
                    "type": "string"
                },
                "password": {
                    "description": "Password\nexample: P_ass11worD",
                    "type": "string"
                }
            }
        },
        "handler.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "handler.RegisterResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Unique user email\nexample: example@gmail.com",
                    "type": "string"
                },
                "id": {
                    "description": "ID of created user\nexample: 1",
                    "type": "integer"
                },
                "username": {
                    "description": "Username\nexample: user_name",
                    "type": "string"
                }
            }
        },
        "handler.createCardRequest": {
            "type": "object",
            "properties": {
                "account_id": {
                    "description": "ID of the account to associate the credit with\nexample: 42",
                    "type": "integer"
                }
            }
        },
        "handler.createCreditRequest": {
            "type": "object",
            "properties": {
                "account_id": {
                    "description": "ID of the account to associate the credit with\nexample: 42",
                    "type": "integer"
                },
                "interest_rate": {
                    "description": "Annual interest rate in percent\nexample: 12.5",
                    "type": "number"
                },
                "principal": {
                    "description": "Principal credit amount\nexample: 100000.00",
                    "type": "number"
                },
                "term_months": {
                    "description": "Term of the credit in months\nexample: 12",
                    "type": "integer"
                }
            }
        },
        "handler.depositRequest": {
            "type": "object",
            "properties": {
                "account_id": {
                    "description": "ID of the target account\nexample: 42",
                    "type": "integer"
                },
                "amount": {
                    "description": "Amount of funds\nexample: 1000.1",
                    "type": "number"
                }
            }
        },
        "handler.predictedBalanceResponse": {
            "type": "object",
            "properties": {
                "predicted_balance": {
                    "description": "Predicted account balance\nexample: 123456.78",
                    "type": "number"
                }
            }
        },
        "handler.registerRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Unique user email\nexample: example@gmail.com",
                    "type": "string"
                },
                "password": {
                    "description": "Password\nexample: P_ass11worD",
                    "type": "string"
                },
                "username": {
                    "description": "Unique user name\nexample: user_name",
                    "type": "string"
                }
            }
        },
        "handler.transferRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount of funds\nexample: 1000.1",
                    "type": "number"
                },
                "from_account_id": {
                    "description": "ID of sender account\nexample: 42",
                    "type": "integer"
                },
                "to_account_id": {
                    "description": "ID of the recipient account\nexample: 24",
                    "type": "integer"
                }
            }
        },
        "model.Account": {
            "type": "object",
            "properties": {
                "balance": {
                    "description": "Current account balance\nexample: 1000",
                    "type": "number"
                },
                "id": {
                    "description": "Unique ID of the account\nexample: 102",
                    "type": "integer"
                },
                "user_id": {
                    "description": "Unique userID of the account\nexample: 102",
                    "type": "integer"
                }
            }
        },
        "model.CardPlain": {
            "type": "object",
            "properties": {
                "account_id": {
                    "description": "Account ID this card is linked to\nexample: 42",
                    "type": "integer"
                },
                "cvv": {
                    "description": "CVV code (shown only once after creation)\nexample: 319",
                    "type": "string"
                },
                "expiry": {
                    "description": "Expiry date in MM/YY format\nexample: 12/28",
                    "type": "string"
                },
                "id": {
                    "description": "Unique ID of the card\nexample: 102",
                    "type": "integer"
                },
                "number": {
                    "description": "Plaintext card number (shown once)\nexample: 4276123456789012",
                    "type": "string"
                }
            }
        },
        "model.CardRaw": {
            "type": "object",
            "properties": {
                "account_id": {
                    "description": "Account ID this card is linked to\nexample: 42",
                    "type": "integer"
                },
                "expiry": {
                    "description": "Encrypted expiry date\nexample: 12/28",
                    "type": "string"
                },
                "hmac": {
                    "description": "HMAC signature of the card\nexample: d41d8cd98f00b204e9800998ecf8427e",
                    "type": "string"
                },
                "id": {
                    "description": "Unique ID of the card\nexample: 101",
                    "type": "integer"
                },
                "number": {
                    "description": "Encrypted card number\nexample: 4276123456789012",
                    "type": "string"
                }
            }
        },
        "model.Credit": {
            "type": "object",
            "properties": {
                "account_id": {
                    "description": "ID of the associated account\nexample: 42",
                    "type": "integer"
                },
                "created_at": {
                    "description": "Date the credit was issued\nexample: 2025-05-01T00:00:00Z",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the credit\nexample: 101",
                    "type": "integer"
                },
                "interest_rate": {
                    "description": "Annual interest rate (percent)\nexample: 12.5",
                    "type": "number"
                },
                "monthly_payment": {
                    "description": "Monthly annuity payment\nexample: 8885.44",
                    "type": "number"
                },
                "principal": {
                    "description": "Original credit amount\nexample: 100000.00",
                    "type": "number"
                },
                "term_months": {
                    "description": "Credit term in months\nexample: 12",
                    "type": "integer"
                },
                "user_id": {
                    "description": "ID of the user who owns the credit\nexample: 1",
                    "type": "integer"
                }
            }
        },
        "model.MonthlyStats": {
            "type": "object",
            "properties": {
                "credit_due_total": {
                    "description": "Total unpaid credit obligations\nexample: 50000.00",
                    "type": "number"
                },
                "monthly_expense": {
                    "description": "Total expenses for the current month\nexample: 80000.00",
                    "type": "number"
                },
                "monthly_income": {
                    "description": "Total income for the current month\nexample: 120000.00",
                    "type": "number"
                }
            }
        },
        "model.PaymentSchedule": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Payment amount for the month\nexample: 8885.44",
                    "type": "number"
                },
                "due_date": {
                    "description": "Due date for the payment\nexample: 2025-06-01T00:00:00Z",
                    "type": "string"
                },
                "paid": {
                    "description": "Whether the payment was successfully made\nexample: false",
                    "type": "boolean"
                },
                "penalty_applied": {
                    "description": "Whether a penalty was applied due to late or failed payment\nexample: true",
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Banking API",
	Description:      "REST API for banking service",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
